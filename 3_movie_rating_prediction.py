# -*- coding: utf-8 -*-
"""3.MOVIE RATING PREDICTION

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u9C8OvTkv-1JE2aR-SyFu71PZqzqT3fj
"""

# Importing important libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn import svm

import warnings
warnings.filterwarnings('ignore')

"""Movies"""

#Input movies dataset
movies = pd.read_csv(r"/content/movies.dat", sep='::', engine='python', encoding='latin1')
movies.columns =['MovieID', 'Title', 'Genres']
movies.dropna(inplace=True)
movies.head()

movies.shape

movies.MovieID.nunique()

"""Ratings"""

#Input ratings dataset
ratings = pd.read_csv(r"/content/ratings.dat",sep='::', engine='python')
ratings.columns =['UserID', 'MovieID', 'Rating', 'Timestamp']
ratings.dropna(inplace=True)

#Read the sample ratings dataset
ratings.head()

ratings.shape

ratings.MovieID.nunique()

#Input users dataset
users = pd.read_csv(r"/content/users.dat",sep='::',engine='python')
users.columns =['UserID', 'Gender', 'Age', 'Occupation', 'Zip-code']
users.nunique()
#Read the sample users dataset
users.head()

"""Merging Movies and Ratings

Let's pretend that you want to examine the ratings DataFrame, but you want to know the title of each movie rather than its MovieID. The best way to accomplish this objective is by "joining" (or "merging") the DataFrames using the Pandas merge function:
"""

movies.columns

ratings

users.columns

movie_ratings = pd.merge(movies, ratings)
movie_ratings.columns

df=pd.merge(movie_ratings, users)
df

movie_ratings.head(100)

movie_ratings.shape

print(movies.shape)
print(ratings.shape)
print(movie_ratings.shape)

"""Notice the shapes of the three DataFrames:

There are 1682 rows in the movies DataFrame.
There are 100000 rows in the ratings DataFrame.
The merge function resulted in a movie_ratings DataFrame with 100000 rows, because every row from ratings matched a row from movies.
The movie_ratings DataFrame has 5 columns, namely the 2 columns from movies, plus the 4 columns from ratings, minus the 1 column in common.
"""

# Number of movies with Rating of 5 = 225473
movie_ratings[movie_ratings['Rating'] == 5]

movie_ratings.isnull().sum()

"""DATA VISUALISATION¶"""

a = movie_ratings.groupby("Rating").size().sort_values(ascending=False)
plt.xlabel("Rating")
plt.ylabel("Viewership Count")
a.plot(kind="bar",color = ['purple'])
plt.show()

# Ratings for all the movies reviewed by a particular user whose user ID is 700
import  matplotlib.pyplot as plt
a = movie_ratings.groupby("Title").size().sort_values(ascending=False)[:25]
plt.ylabel("Title")
plt.xlabel("Viewership Count")
a.plot(kind="barh", color = ['pink'])
plt.show()

a = df.groupby("Gender").size().sort_values(ascending=False)
plt.xlabel("Gender")
plt.ylabel("Viewership Count")
a.plot(kind="bar",color = ['green'])
plt.show()

a = df.groupby("Age").size().sort_values(ascending=False)[:25]
plt.xlabel("Age")
plt.ylabel("Percentage Viewership")
total_viewership = len(df)
a_per = (a / total_viewership) * 100

a_per.plot(kind="bar",color = ['yellow'])
plt.show()

"""MACHINE LEARNING¶"""

gender = {'F':1, 'M':2}
df['Gender'] = df['Gender'].replace(gender)

features = df[['MovieID', 'Age', 'Occupation', 'Gender','UserID']].values

labels = df[['Rating']].values

train, test, train_labels, test_labels = train_test_split(features,labels,test_size=0.33,random_state=42)

"""LOGISTIC REGRESSION¶"""

model = LogisticRegression()
model.fit(train, train_labels)
Y_pred = model.predict(test)
accuracy = model.score(train, train_labels)
accuracy

"""K NEAREST NEIGHBOURS CLASSIFIER"""

model = KNeighborsClassifier(n_neighbors = 3)
model.fit(train, train_labels)
Y_pred = model.predict(test)
accuracy = model.score(train, train_labels)
accuracy

"""GAUSSIAN NAIVE BAYES"""

model = GaussianNB()
model.fit(train, train_labels)
Y_pred = model.predict(test)
accuracy = model.score(train, train_labels)
accuracy

"""DECISION TREES"""

model = DecisionTreeClassifier()
model.fit(train, train_labels)
Y_pred = model.predict(test)
accuracy = model.score(train, train_labels)
accuracy

"""RANDOM FOREST CLASSIFIER"""

model = RandomForestClassifier()
model.fit(train, train_labels)
Y_pred = model.predict(test)
accuracy = model.score(train, train_labels)
accuracy